/*	coll1dThe.cpp	Collide two point masses in 1-d theoretically		Sparisoma Viridi | https://github.com/dudung/butiran		Compile: g++ coll1dThe.cpp -o coll1dThe	Execute: ./coll1dThe		20190127	0409 Start at home.*/#include <iostream>#include <cmath>#include <cstdlib>using namespace std;double calcVf(double, double, double, double, double);int main(int argc, char *argv[]) {	// Define program name	const char *pname = "coll1dThe";		// Verbose usage if number of arguments not sufficient	if(argc < 6) {		cout << "Usage: " << pname << " [ma vai mb vbi e]" << endl;		cout << "ma\tmass of 1st particle" << endl;		cout << "vai\tinitial velocity of 1st particle" << endl;		cout << "mb\tmass of 2nd particle" << endl;		cout << "vbi\tinitial velocity of 2nd particle" << endl;		cout << "e\tcoefficient of restitution \\in [0,1]" << endl;				// Terminate program with unsuccessful state		return 1;	}		// Get parameters	double ma = atof(argv[1]);	double vai = atof(argv[2]);	double mb = atof(argv[3]);	double vbi = atof(argv[4]);	double e = atof(argv[5]);		// Calculate final velocities	double vaf = (ma - e * mb) / (ma + mb) * vai		+ ((1 + e) * mb / (ma + mb)) * vbi;	double vbf = ((1 + e) * ma / (ma + mb)) * vai		+ (mb - e * ma) / (ma + mb) * vbi;		// Display results	cout << "Without function" << endl;	cout << "vaf = " << vaf << endl;	cout << "vbf = " << vbf << endl;		cout << endl;		cout << "With function and parameter exchange" << endl;	cout << "vaf = " << calcVf(ma, vai, mb, vbi, e) << endl;	cout << "vbf = " << calcVf(mb, vbi, ma, vai, e) << endl;		// Terminate program with successful state	return 0;}double calcVf(double ma, double vai, double mb, double vbi,	double e) {	double vf = (ma - e * mb) / (ma + mb) * vai		+ ((1 + e) * mb / (ma + mb)) * vbi;	return vf;}